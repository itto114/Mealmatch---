import streamlit as st
import pandas as pd
import pickle  # ‡πÉ‡∏ä‡πâ pickle ‡πÅ‡∏ó‡∏ô joblib

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå
with open("meal_match_model.pkl", "rb") as f:
    model = pickle.load(f)

# ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£
data = {
    "name": ["‡∏£‡πâ‡∏≤‡∏ô A", "‡∏£‡πâ‡∏≤‡∏ô B", "‡∏£‡πâ‡∏≤‡∏ô C", "‡∏£‡πâ‡∏≤‡∏ô D", "‡∏£‡πâ‡∏≤‡∏ô E", "‡∏£‡πâ‡∏≤‡∏ô F"],
    "location": ["‡∏õ‡∏£‡∏∞‡∏ï‡∏π 1", "‡∏õ‡∏£‡∏∞‡∏ï‡∏π 1", "‡∏õ‡∏£‡∏∞‡∏ï‡∏π 3", "‡∏õ‡∏£‡∏∞‡∏ï‡∏π 4", "‡∏õ‡∏£‡∏∞‡∏ï‡∏π 1", "‡∏õ‡∏£‡∏∞‡∏ï‡∏π 2"],
    "choice": ["‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏™‡∏±‡πà‡∏á", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏™‡∏±‡πà‡∏á", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß", "‡∏õ‡∏¥‡πâ‡∏á‡∏¢‡πà‡∏≤‡∏á", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏Å‡∏≤‡∏´‡∏•‡∏µ", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô"],
    "budget": ["50 - 100", "50 - 100", "50 - 100", "200+", "100 - 200", "50 - 100"],
    "time": ["‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô", "‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô", "‡πÄ‡∏ä‡πâ‡∏≤", "‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô", "‡πÄ‡∏¢‡πá‡∏ô", "‡πÄ‡∏ä‡πâ‡∏≤"]
}
df = pd.DataFrame(data)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏£‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô
def filter_restaurants(location, food_type, price_range, time_of_day):
    return df[
        (df['location'] == location) &
        (df['choice'] == food_type) &
        (df['budget'] == price_range) &
        (df['time'] == time_of_day)
    ]['name'].tolist()

# Streamlit UI
st.set_page_config(page_title="MealMatch üçΩÔ∏è", layout="centered")
st.title("üçΩÔ∏è MealMatch - ‡∏°‡∏∑‡πâ‡∏≠‡πÑ‡∏´‡∏ô‡∏î‡∏µ?")

# === ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ===
user_location = st.selectbox("üìç ‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏∞‡πÑ‡∏õ", ["‡∏õ‡∏£‡∏∞‡∏ï‡∏π 1", "‡∏õ‡∏£‡∏∞‡∏ï‡∏π 2", "‡∏õ‡∏£‡∏∞‡∏ï‡∏π 3", "‡∏õ‡∏£‡∏∞‡∏ï‡∏π 4"])
user_choice = st.selectbox("üç± ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏≤‡∏´‡∏≤‡∏£", ["‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏™‡∏±‡πà‡∏á", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏≠‡∏µ‡∏™‡∏≤‡∏ô", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß", "‡∏õ‡∏¥‡πâ‡∏á‡∏¢‡πà‡∏≤‡∏á", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏Å‡∏≤‡∏´‡∏•‡∏µ", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô"])
user_budget = st.radio("üí∏ ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏ï‡πà‡∏≠‡∏°‡∏∑‡πâ‡∏≠ (‡∏ö‡∏≤‡∏ó)", ["‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 50", "50 - 100", "100 - 200", "200+"])
user_time = st.selectbox("‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏±‡∏Å‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡∏Å‡∏¥‡∏ô", ["‡πÄ‡∏ä‡πâ‡∏≤", "‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô", "‡πÄ‡∏¢‡πá‡∏ô"])

# ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö submit
if st.button("üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£"):
    user_input = pd.DataFrame([{
        "location": user_location,
        "choice": user_choice,
        "budget": user_budget,
        "time": user_time
    }])

    # One-hot encoding ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    user_input_encoded = pd.get_dummies(user_input)

    # ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢
    for col in df.drop("name", axis=1).columns:
        if col not in user_input_encoded.columns:
            user_input_encoded[col] = 0

    # ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á columns ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
    user_input_encoded = user_input_encoded[df.drop("name", axis=1).columns]

    # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•
    prediction = model.predict(user_input_encoded)[0]

    if prediction == 1:
        matched_restaurants = filter_restaurants(user_location, user_choice, user_budget, user_time)
        if matched_restaurants:
            st.success("‡∏£‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ üçú")
            st.write(matched_restaurants)
        else:
            st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì üò•")
    else:
        st.warning("‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏£‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡πÉ‡∏à ‡∏•‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡∏π‡∏ô‡∏∞ üòä")
